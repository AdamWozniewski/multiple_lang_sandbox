version: '3.8'
services:
  mongo:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
  mongosh:
    image: mongo:latest
    depends_on:
      - mongo
    entrypoint: [ "mongosh", "--host", "mongo", "-u", "admin", "-p", "example", "--authenticationDatabase", "admin" ]
    stdin_open: true
    tty: true

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      MONGO_EXPRESS_USERNAME : admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      MONGO_EXPRESS_PASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8081:8081"
    depends_on:
      - mongo
  postgresqldb:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: postgres
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
  adminer:
    image: adminer
    restart: always
    ports:
      - 8082:8080
  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'
    ports:
      - 1025:1025
      - 8025:8025
  jenkins:
    build:
      context: .
      dockerfile: images/jenkins.Dockerfile
    container_name: jenkins-blueocean
    restart: on-failure
    networks:
      - jenkins
    environment:
      DOCKER_HOST: tcp://docker:2376
      DOCKER_CERT_PATH: /certs/client
      DOCKER_TLS_VERIFY: '1'
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - jenkins-docker-certs:/certs/client:ro
volumes:
  jenkins-data:
  jenkins-docker-certs:
  mongo_data:
    driver: local
  pgdata:
networks:
  jenkins: